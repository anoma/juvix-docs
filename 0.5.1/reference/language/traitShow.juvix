module traitShow;

import Stdlib.Prelude open hiding {Show; mkShow; module Show};

--8<-- [start:show]
trait
type Show A := mkShow {show : A → String};
--8<-- [end:show]

--8<-- [start:showInstances]
instance
showStringI : Show String := mkShow (show := id);

instance
showBoolI : Show Bool :=
  mkShow (show := λ {x := if x "true" "false"});

instance
showNatI : Show Nat := mkShow (show := natToString);
--8<-- [end:showInstances]

--8<-- [start:showList]
showList {A} : {{Show A}} → List A → String
  | nil := "nil"
  | (h :: t) := Show.show h ++str " :: " ++str showList t;

instance
showListI {A} {{Show A}} : Show (List A) :=
  mkShow (show := showList);
--8<-- [end:showList]

--8<-- [start:showMaybe]
showMaybe {A} {{Show A}} : Maybe A → String
  | (just x) := "just (" ++str Show.show x ++str ")"
  | nothing := "nothing";

instance
showMaybeI {A} {{Show A}} : Show (Maybe A) :=
  mkShow (show := showMaybe);
--8<-- [end:showMaybe]

--8<-- [start:implicit]
f {A} {{Show A}} : A → String
  | x := Show.show x;

f' {A} : {{Show A}} → A → String
  | {{mkShow s}} x := s x;

f'' {A} : {{Show A}} → A → String
  | {{M}} x := Show.show {{M}} x;

f'3 {A} {{M : Show A}} : A → String := Show.show {{M}};

f'4 {A} {{_ : Show A}} : A → String := Show.show;
--8<-- [end:implicit]

--8<-- [start:main]
main : IO :=
  printStringLn (Show.show true)
    >> printStringLn (f false)
    >> printStringLn (Show.show 3)
    >> printStringLn (Show.show [true; false])
    >> printStringLn (Show.show [1; 2; 3])
    >> printStringLn (f' [1; 2])
    >> printStringLn (f'' [true; false])
    >> printStringLn (f'3 [just true; nothing; just false])
    >> printStringLn (f'4 [just [1]; nothing; just [2; 3]])
    >> printStringLn (f'3 "abba")
    >> printStringLn
      (f'3 {{M := mkShow λ {x := x ++str "!"}}} "abba")
    >> printStringLn (Show.show ["a"; "b"; "c"; "d"]);
--8<-- [end:main]
