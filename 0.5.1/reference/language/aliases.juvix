module aliases;

import Stdlib.Data.Fixity open;

-- aliases are allowed to forward reference
--8<-- [start:forward]
syntax alias Boolean := Bool;
syntax alias ⊥ := false;
syntax alias ⊤ := true;

type Bool :=
  | false
  | true;

not : Boolean -> Boolean
  | ⊥ := ⊤
  | ⊤ := ⊥;
--8<-- [end:forward]

--8<-- [start:inside-body]
not2 (b : Boolean) : Boolean :=
  let
    syntax alias yes := ⊤;
    syntax alias no := ⊥;
  in case b of {
    | no := yes
    | yes := no
  };
--8<-- [end:inside-body]

--8<-- [start:export]
module ExportAlias;
  syntax alias Binary := Bool;
  syntax alias one := ⊤;
  syntax alias zero := ⊥;
end;

open ExportAlias;

syntax operator || logical;
|| : Binary -> Binary -> Binary
  | zero b := b
  | one _ := one;
--8<-- [end:export]

--8<-- [start:or]
syntax alias or := ||;

or3 (a b c : Binary) : Binary := or (or a b) c;
--8<-- [end:or]

type Pair := mkPair Binary Binary;

syntax operator , pair;
syntax alias , := mkPair;

myPair : Pair := one, ⊥;

--8<-- [start:local-alias]
localAlias : Binary -> Binary
  | b :=
    let
      syntax alias b' := b;
    in b';
--8<-- [end:local-alias]
