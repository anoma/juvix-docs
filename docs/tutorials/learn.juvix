module learn;

--8<-- [start:HelloWorld]
-- Hello world example. This is a comment.
module Hello;
  -- Import the standard library prelude, including the 'String' type
  import Stdlib.Prelude open;

  main : String;
  main := "Hello world!";
end;
--8<-- [end:HelloWorld]

module Bool-example;
  --8<-- [start:Bool]
  type Bool :=
    | true : Bool
    | false : Bool;
  --8<-- [end:Bool]

  --8<-- [start:BoolNot]
  not : Bool -> Bool;
  not true := false;
  not false := true;
--8<-- [end:BoolNot]
end;

module Nat-example;
  --8<-- [start:Nat]
  type Nat :=
    | zero : Nat
    | suc : Nat -> Nat;
  --8<-- [end:Nat]

  --8<-- [start:NatAdd]
  syntax infixl 6 +;
  + : Nat -> Nat -> Nat;
  + zero b := b;
  + (suc a) b := suc (a + b);
  --8<-- [end:NatAdd]

  open Bool-example;

  --8<-- [start:NatEven]
  even : Nat -> Bool;
  even zero := true;
  even (suc zero) := false;
  even (suc (suc n)) := even n;
  --8<-- [end:NatEven]

  --8<-- [start:isPositive]
  isPositive : Nat -> Bool;
  isPositive zero := false;
  isPositive (suc _) := true;
  --8<-- [end:isPositive]

  module anotherPositive;
    --8<-- [start:isPositive2]
    isPositive : Nat -> Bool;
    isPositive zero := false;
    isPositive _ := true;
  --8<-- [end:isPositive2]
  end;
end;

module max3-example;
  --8<-- [start:max3]
  import Stdlib.Prelude open;
  import Stdlib.Data.Nat.Ord open;

  max3 : Nat -> Nat -> Nat -> Nat;
  max3 x y z := if (x > y) (max x z) (max y z);
--8<-- [end:max3]
end;

module let-example;
  import Stdlib.Prelude open;

  --8<-- [start:let]
  f : Nat -> Nat;
  f a :=
    let
      x : Nat := a + 5;
      y : Nat := a * 7 + x;
    in x * y;
--8<-- [end:let]
end;

module let-even;
  open Nat-example;
  open Bool-example;

  --8<-- [start:let-even]
  even : Nat -> Bool;
  even :=
    let
      even' : Nat -> Bool;
      odd' : Nat -> Bool;
      even' zero := true;
      even' (suc n) := odd' n;
      odd' zero := false;
      odd' (suc n) := even' n;
    in even';
--8<-- [end:let-even]
end;

module NList-example;
  import Stdlib.Prelude open;

  --8<-- [start:NList]
  type NList :=
    | nnil : NList
    | ncons : Nat -> NList -> NList;
  --8<-- [end:NList]

  --8<-- [start:nlength]
  nlength : NList -> Nat;
  nlength nnil := 0;
  nlength (ncons _ xs) := nlength xs + 1;
  --8<-- [end:nlength]

  --8<-- [start:nmaximum]
  import Stdlib.Data.Nat.Ord open using {max};

  nmaximum : NList -> Nat;
  nmaximum nnil := 0;
  nmaximum (ncons x xs) := max x (nmaximum xs);
  --8<-- [end:nmaximum]

  --8<-- [start:NListMap]
  nmap : (Nat -> Nat) -> NList -> NList;
  nmap _ nnil := nnil;
  nmap f (ncons x xs) := ncons (f x) (nmap f xs);
--8<-- [end:NListMap]
end;

module Tree-example;
  open Nat-example;

  --8<-- [start:Tree]
  type Tree :=
    | leaf : Nat -> Tree
    | node : Nat -> Tree -> Tree -> Tree;
  --8<-- [end:Tree]

  --8<-- [start:TreeMirror]
  mirror : Tree -> Tree;
  mirror (leaf x) := leaf x;
  mirror (node x l r) := node x (mirror r) (mirror l);
--8<-- [end:TreeMirror]
end;

module List-example;
  
  --8<-- [start:List]
  syntax infixr 5 ::;
  type List (A : Type) :=
    | nil : List A
    | :: : A -> List A -> List A;
  --8<-- [end:List]

  --8<-- [start:ListMap]
  map : {A B : Type} -> (A -> B) -> List A -> List B;
  map f nil := nil;
  map f (h :: hs) := f h :: map f hs;
  --8<-- [end:ListMap]

  --8<-- [start:ListTail]
  tail : {A : Type} -> List A -> List A;
  tail (_ :: xs) := xs;
  tail nil := nil;
--8<-- [end:ListTail]
end;

module tail-recursion-example;
  import Stdlib.Prelude open hiding {map};

  --8<-- [start:ListSum]
  sum : List Nat -> Nat;
  sum nil := 0;
  sum (x :: xs) := x + sum xs;
  --8<-- [end:ListSum]

  --8<-- [start:ListSumTail]
  sum' : List Nat -> Nat;
  sum' lst :=
    let
      go : Nat -> List Nat -> Nat;
      go acc nil := acc;
      go acc (x :: xs) := go (acc + x) xs;
    in go 0 lst;
  --8<-- [end:ListSumTail]

  module fibo-example;
    --8<-- [start:FiboTail]
    fib : Nat -> Nat;
    fib :=
      let
        go : Nat -> Nat -> Nat -> Nat;
        go cur _ zero := cur;
        go cur next (suc n) := go next (cur + next) n;
      in go 0 1;
  --8<-- [end:FiboTail]
  end;

  module fibo-exponential;
    --8<-- [start:FiboNaive]
    fib : Nat -> Nat;
    fib zero := 0;
    fib (suc zero) := 1;
    fib (suc (suc n)) := fib n + fib (suc n);
  --8<-- [end:FiboNaive]
  end;

  module list-map;
    --8<-- [start:ListMapTail]
    map : {A B : Type} -> (A -> B) -> List A -> List B;
    map {A} {B} f :=
      let
        go : List B -> List A -> List B;
        go acc nil := reverse acc;
        go acc (x :: xs) := go (f x :: acc) xs;
      in go nil;
  --8<-- [end:ListMapTail]
  end;
end;

module iterators-example;
  import Stdlib.Prelude open hiding {map};

  --8<-- [start:sum-for]
  sum : List Nat -> Nat;
  sum l := for (acc := 0) (x in l) x + acc;
  --8<-- [end:sum-for]

  --8<-- [start:map-rfor]
  map : {A B : Type} -> (A -> B) -> List A -> List B;
  map f l := rfor (acc := nil) (x in l) f x :: acc;
--8<-- [end:map-rfor]
end;

module totality-example;
  import Stdlib.Prelude open;
  import Stdlib.Data.Nat.Ord open;

  module fact-not-terminating-example;
    terminating
    --8<-- [start:fact-not-terminating]
    fact : Nat -> Nat;
    fact x := if (x == 0) 1 (x * fact (sub x 1));
  --8<-- [end:fact-not-terminating]
  end;

  module fact-terminating-example;
    --8<-- [start:fact-terminating]
    fact : Nat -> Nat;
    fact zero := 1;
    fact x@(suc n) := x * fact n;
  --8<-- [end:fact-terminating]
  end;

  --8<-- [start:log2-terminating]
  terminating
  log2 : Nat -> Nat;
  log2 n := if (n <= 1) 0 (suc (log2 (div n 2)));
  --8<-- [end:log2-terminating]

  -- TODO: open issue about this
  -- The following definition should be rejected.
  module coverage-examples;
    --8<-- [start:even-def-not-pass-coverage]
    even : Nat -> Bool;
    even zero := true;
    even (suc (suc n)) := even n;
  --8<-- [end:even-def-not-pass-coverage]
  end;
end;

module Maybe-example;
  --8<-- [start:Maybe]
  type Maybe (A : Type) :=
    | nothing : Maybe A
    | just : A -> Maybe A;
  --8<-- [end:Maybe]

  open List-example using {List; nil; ::};

  module tail-list-example;
    --8<-- [start:tailMaybe]
    tail' : {A : Type} -> List A -> Maybe (List A);
    tail' (_ :: xs) := just xs;
    tail' nil := nothing;
  --8<-- [end:tailMaybe]
  end;
end;

module Exercise-solutions;
  import Stdlib.Prelude open hiding {∘};
  import Stdlib.Data.Nat.Ord open;

  module SolBool;
    --8<-- [start:SolBool]
    not : Bool -> Bool;
    not false := true;
    not true := false;

    or : Bool -> Bool -> Bool;
    or false b := b;
    or true _ := true;

    and : Bool -> Bool -> Bool;
    and true b := b;
    and false _ := false;

    xor : Bool -> Bool -> Bool;
    xor a b := and (not (and a b)) (or a b);
  --8<-- [end:SolBool]
  end;

  module SolNMaybe;
    type NMaybe :=
      | nnothing : NMaybe
      | njust : Nat → NMaybe;

    --8<-- [start:NMaybe-isJust]
    isJust : NMaybe -> Bool;
    isJust (njust _) := true;
    isJust nnothing := false;
    --8<-- [end:NMaybe-isJust]

    --8<-- [start:NMaybe-fromMaybe]
    fromMaybe : Nat -> NMaybe -> Nat;
    fromMaybe _ (njust n) := n;
    fromMaybe d nnothing := d;
  --8<-- [end:NMaybe-fromMaybe]
  end;

  module SolMaybe;
    --8<-- [start:Maybe-fromMaybe]
    fromMaybe : {A : Type} -> A -> Maybe A -> A;
    fromMaybe _ (just n) := n;
    fromMaybe d nothing := d;
    --8<-- [end:Maybe-fromMaybe]

    --8<-- [start:Maybe-maybe]
    maybe : {A B : Type} -> B -> (A -> B) -> Maybe A -> B;
    maybe _ f (just n) := f n;
    maybe d _ nothing := d;
  --8<-- [end:Maybe-maybe]
  end;

  module SolComposition;
    --8<-- [start:compose]
    compose : {A B C : Type} -> (B -> C) -> (A -> B) -> A -> C;
    compose f g x := f (g x);
  --8<-- [end:compose]
  end;

  module SolLists;
    --8<-- [start:SolLast]
    last : {A : Type} -> List A -> Maybe A;
    last nil := nothing;
    last (x :: nil) := just x;
    last (_ :: xs) := last xs;
    --8<-- [end:SolLast]

    --8<-- [start:List-concat]
    concat : {A : Type} -> List A -> List A -> List A;
    concat nil b := b;
    concat (a :: as) b := a :: concat as b;
    --8<-- [end:List-concat]

    --8<-- [start:List-concatMany]
    concatMany : {A : Type} -> List (List A) -> List A;
    concatMany nil := nil;
    concatMany (a :: as) := concat a (concatMany as);
    --8<-- [end:List-concatMany]

    --8<-- [start:List-concatMany-iter]
    concatMany-iter : {A : Type} -> List (List A) -> List A;
    concatMany-iter m :=
      rfor (acc := nil) (l in m) concat l acc;
  --8<-- [end:List-concatMany-iter]

  end;

  --8<-- [start:SolPrime]
  prime : Nat -> Bool;
  prime x :=
    let
      go : Nat -> Bool;
      go zero := true;
      go (suc zero) := true;
      go n@(suc k) := if (mod x k == 0) false (go k);
    in case x
      | zero := false
      | suc zero := false
      | suc k := go k;
  --8<-- [end:SolPrime]

  --8<-- [start:SolHalf]
  half : Nat -> Nat;
  half zero := 0;
  half (suc zero) := 0;
  half (suc (suc n)) := half n + 1;
  --8<-- [end:SolHalf]

  --8<-- [start:SolSuffixes]
  suffixes : {A : Type} -> List A -> List (List A);
  suffixes nil := nil :: nil;
  suffixes xs@(_ :: xs') := xs :: suffixes xs';
  --8<-- [end:SolSuffixes]

  module Tree-nat;
    type Tree :=
      | leaf : Nat -> Tree
      | node : Nat -> Tree -> Tree -> Tree;

    --8<-- [start:SolTreeMap]
    tmap : (Nat -> Nat) -> Tree -> Tree;
    tmap f (leaf x) := leaf (f x);
    tmap f (node x l r) := node (f x) (tmap f l) (tmap f r);
  --8<-- [end:SolTreeMap]
  end;

  module Tree-poly;
    --8<-- [start:SolTreeMapPoly]
    type Tree (A : Type) :=
      | leaf : A -> Tree A
      | node : A -> Tree A -> Tree A -> Tree A;

    tmap : {A B : Type} -> (A -> B) -> Tree A -> Tree B;
    tmap f (leaf x) := leaf (f x);
    tmap f (node x l r) := node (f x) (tmap f l) (tmap f r);
  --8<-- [end:SolTreeMapPoly]
  end;

  module reverse-for;
    --8<-- [start:SolReverseFor]
    reverse : {A : Type} -> List A -> List A;
    reverse xs := for (acc := nil) (x in xs) x :: acc;
  --8<-- [end:SolReverseFor]
  end;

  module reverse-tail;
    --8<-- [start:SolReverseTail]
    reverse : {A : Type} -> List A -> List A;
    reverse {A} :=
      let
        go : List A -> List A -> List A;
        go acc nil := acc;
        go acc (x :: xs) := go (x :: acc) xs;
      in go nil;
  --8<-- [end:SolReverseTail]
  end;

  --8<-- [start:SolFact]
  fact : Nat -> Nat;
  fact :=
    let
      go : Nat -> Nat -> Nat;
      go acc zero := acc;
      go acc n@(suc n') := go (acc * n) n';
    in go 1;
  --8<-- [end:SolFact]

  --8<-- [start:Composition]
  syntax infixr 9 ∘;
  ∘ : {A B C : Type} -> (B -> C) -> (A -> B) -> A -> C;
  ∘ f g x := f (g x);
  --8<-- [end:Composition]

  --8<-- [start:SolCompose]
  comp : {A : Type} -> List (A -> A) -> A -> A;
  comp fs := for (acc := id) (f in fs) acc ∘ f;
--8<-- [end:SolCompose]

end;
