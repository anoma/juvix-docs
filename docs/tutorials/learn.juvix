module learn;

--8<-- [start:HelloWorld]
-- Hello world example. This is a comment.
module Hello;
  -- Import the standard library prelude, including the 'String' type
  import Stdlib.Prelude open;

  main : String := "Hello world!";
end;
--8<-- [end:HelloWorld]

module Bool-example;
  --8<-- [start:Bool]
  type Bool :=
    | true
    | false;
  --8<-- [end:Bool]

  --8<-- [start:BoolNot]
  not : Bool -> Bool
    | true := false
    | false := true;
--8<-- [end:BoolNot]
end;

module Bool-functions-1;
  open Bool-example;

  --8<-- [start:BoolOr]
  or' (x : Bool) : Bool -> Bool
    | true := true
    | _ := x;
--8<-- [end:BoolOr]
end;

module Bool-functions-2;
  open Bool-example;

  --8<-- [start:BoolOr2]
  or' : Bool -> Bool -> Bool
    | _ true := true
    | x _ := x;
  --8<-- [end:BoolOr2]

  --8<-- [start:BoolId]
  id (x : Bool) : Bool := x;
--8<-- [end:BoolId]
end;

module Nat-adt;
  --8<-- [start:NatAdt]
  type Nat :=
    | zero
    | suc Nat;
--8<-- [end:NatAdt]
end;

module Nat-example;
  import Stdlib.Data.Fixity open;

  --8<-- [start:Nat]
  type Nat :=
    | zero : Nat
    | suc : Nat -> Nat;
  --8<-- [end:Nat]

  --8<-- [start:NatAdd]
  syntax operator + additive;
  + : Nat -> Nat -> Nat
    | zero b := b
    | (suc a) b := suc (a + b);
  --8<-- [end:NatAdd]

  open Bool-example;

  --8<-- [start:NatEven]
  even : Nat -> Bool
    | zero := true
    | (suc zero) := false
    | (suc (suc n)) := even n;
  --8<-- [end:NatEven]

  --8<-- [start:isPositive]
  isPositive : Nat -> Bool
    | zero := false
    | (suc _) := true;
  --8<-- [end:isPositive]

  module anotherPositive;
    --8<-- [start:isPositive2]
    isPositive : Nat -> Bool
      | zero := false
      | _ := true;
  --8<-- [end:isPositive2]
  end;
end;

module max3-example;
  --8<-- [start:max3]
  import Stdlib.Prelude open;
  import Stdlib.Data.Nat.Ord open;

  max3 (x y z : Nat) : Nat := if (x > y) (max x z) (max y z);
--8<-- [end:max3]
end;

module let-example;
  import Stdlib.Prelude open;

  --8<-- [start:let]
  f (a : Nat) : Nat :=
    let
      x : Nat := a + 5;
      y : Nat := a * 7 + x;
    in x * y;
--8<-- [end:let]
end;

module let-even;
  open Nat-example;
  open Bool-example;

  --8<-- [start:let-even]
  even : Nat -> Bool :=
    let
      even' : Nat -> Bool
        | zero := true
        | (suc n) := odd' n;
      odd' : Nat -> Bool
        | zero := false
        | (suc n) := even' n;
    in even';
--8<-- [end:let-even]
end;

module NList-example;
  import Stdlib.Prelude open;

  --8<-- [start:NList]
  type NList :=
    | nnil : NList
    | ncons : Nat -> NList -> NList;
  --8<-- [end:NList]

  --8<-- [start:nlength]
  nlength : NList -> Nat
    | nnil := 0
    | (ncons _ xs) := nlength xs + 1;
  --8<-- [end:nlength]

  --8<-- [start:nmaximum]
  import Stdlib.Data.Nat.Ord open using {max};

  nmaximum : NList -> Nat
    | nnil := 0
    | (ncons x xs) := max x (nmaximum xs);
  --8<-- [end:nmaximum]

  --8<-- [start:NListMap]
  nmap (f : Nat -> Nat) : NList -> NList
    | nnil := nnil
    | (ncons x xs) := ncons (f x) (nmap f xs);
--8<-- [end:NListMap]
end;

module Tree-example;
  open Nat-example;

  --8<-- [start:Tree]
  type Tree :=
    | leaf : Nat -> Tree
    | node : Nat -> Tree -> Tree -> Tree;
  --8<-- [end:Tree]

  --8<-- [start:TreeMirror]
  mirror : Tree -> Tree
    | (leaf x) := leaf x
    | (node x l r) := node x (mirror r) (mirror l);
--8<-- [end:TreeMirror]
end;

module List-example;
  import Stdlib.Data.Fixity open;

  --8<-- [start:List]
  syntax operator :: cons;
  type List A :=
    | nil : List A
    | :: : A -> List A -> List A;
  --8<-- [end:List]

  --8<-- [start:ListMap]
  map {A B} (f : A -> B) : List A -> List B
    | nil := nil
    | (h :: hs) := f h :: map f hs;
  --8<-- [end:ListMap]

  --8<-- [start:ListTail]
  tail {A} : List A -> List A
    | (_ :: xs) := xs
    | nil := nil;
--8<-- [end:ListTail]
end;

module tail-recursion-example;
  import Stdlib.Prelude open hiding {map};

  --8<-- [start:ListSum]
  sum : List Nat -> Nat
    | nil := 0
    | (x :: xs) := x + sum xs;
  --8<-- [end:ListSum]

  --8<-- [start:ListSumTail]
  sum' (lst : List Nat) : Nat :=
    let
      go (acc : Nat) : List Nat -> Nat
        | nil := acc
        | (x :: xs) := go (acc + x) xs;
    in go 0 lst;
  --8<-- [end:ListSumTail]

  module fibo-example;
    --8<-- [start:FiboTail]
    fib : Nat -> Nat :=
      let
        go (cur next : Nat) : Nat -> Nat
          | zero := cur
          | (suc n) := go next (cur + next) n;
      in go 0 1;
  --8<-- [end:FiboTail]
  end;

  module fibo-exponential;
    --8<-- [start:FiboNaive]
    fib : Nat -> Nat
      | zero := 0
      | (suc zero) := 1
      | (suc (suc n)) := fib n + fib (suc n);
  --8<-- [end:FiboNaive]
  end;

  module list-map;
    --8<-- [start:ListMapTail]
    map {A B} (f : A -> B) : List A -> List B :=
      let
        go (acc : List B) : List A -> List B
          | nil := reverse acc
          | (x :: xs) := go (f x :: acc) xs;
      in go nil;
  --8<-- [end:ListMapTail]
  end;
end;

module iterators-example;
  import Stdlib.Prelude open hiding {map};

  --8<-- [start:sum-for]
  sum (l : List Nat) : Nat :=
    for (acc := 0) (x in l) {x + acc};
  --8<-- [end:sum-for]

  --8<-- [start:map-rfor]
  map {A B} (f : A -> B) (l : List A) : List B :=
    rfor (acc := nil) (x in l) {f x :: acc};
--8<-- [end:map-rfor]
end;

module totality-example;
  import Stdlib.Prelude open;
  import Stdlib.Data.Nat.Ord open;

  module fact-not-terminating-example;
    terminating
    --8<-- [start:fact-not-terminating]
    fact (x : Nat) : Nat := if (x == 0) 1 (x * fact (sub x 1));
  --8<-- [end:fact-not-terminating]
  end;

  module fact-terminating-example;
    --8<-- [start:fact-terminating]
    fact : Nat -> Nat
      | zero := 1
      | x@(suc n) := x * fact n;
  --8<-- [end:fact-terminating]
  end;

  --8<-- [start:log2-terminating]
  terminating
  log2 (n : Nat) : Nat :=
    if (n <= 1) 0 (suc (log2 (div n 2)));
  --8<-- [end:log2-terminating]

  -- TODO: open issue about this
  -- The following definition should be rejected.
  module coverage-examples;
    --8<-- [start:even-def-not-pass-coverage]
    even : Nat -> Bool
      | zero := true
      | (suc (suc n)) := even n;
  --8<-- [end:even-def-not-pass-coverage]
  end;
end;

module Maybe-example;
  --8<-- [start:Maybe]
  type Maybe A :=
    | nothing : Maybe A
    | just : A -> Maybe A;
  --8<-- [end:Maybe]

  open List-example using {List; nil; ::};

  module tail-list-example;
    --8<-- [start:tailMaybe]
    tail' {A} : List A -> Maybe (List A)
      | (_ :: xs) := just xs
      | nil := nothing;
  --8<-- [end:tailMaybe]
  end;
end;

module Exercise-solutions;
  import Stdlib.Prelude open hiding {∘};
  import Stdlib.Data.Nat.Ord open;

  module SolBool;
    --8<-- [start:SolBool]
    not : Bool -> Bool
      | false := true
      | true := false;

    or : Bool -> Bool -> Bool
      | false b := b
      | true _ := true;

    and : Bool -> Bool -> Bool
      | true b := b
      | false _ := false;

    xor (a b : Bool) : Bool := and (not (and a b)) (or a b);
  --8<-- [end:SolBool]
  end;

  module SolNMaybe;
    type NMaybe :=
      | nnothing : NMaybe
      | njust : Nat → NMaybe;

    --8<-- [start:NMaybe-isJust]
    isJust : NMaybe -> Bool
      | (njust _) := true
      | nnothing := false;
    --8<-- [end:NMaybe-isJust]

    --8<-- [start:NMaybe-fromMaybe]
    fromMaybe (d : Nat) : NMaybe -> Nat
      | (njust n) := n
      | nnothing := d;
  --8<-- [end:NMaybe-fromMaybe]
  end;

  module SolMaybe;
    --8<-- [start:Maybe-fromMaybe]
    fromMaybe {A} (d : A) : Maybe A -> A
      | (just n) := n
      | nothing := d;
    --8<-- [end:Maybe-fromMaybe]

    --8<-- [start:Maybe-maybe]
    maybe {A B} (d : B) (f : A -> B) : Maybe A -> B
      | (just n) := f n
      | nothing := d;
  --8<-- [end:Maybe-maybe]
  end;

  module SolComposition;
    --8<-- [start:compose]
    compose {A B C} (f : B -> C) (g : A -> B) (x : A) : C :=
      f (g x);
  --8<-- [end:compose]
  end;

  module SolLists;
    --8<-- [start:SolLast]
    last {A} : List A -> Maybe A
      | nil := nothing
      | (x :: nil) := just x
      | (_ :: xs) := last xs;
    --8<-- [end:SolLast]

    --8<-- [start:List-concat]
    concat {A} : List A -> List A -> List A
      | nil b := b
      | (a :: as) b := a :: concat as b;
    --8<-- [end:List-concat]

    --8<-- [start:List-concatMany]
    concatMany {A} : List (List A) -> List A
      | nil := nil
      | (a :: as) := concat a (concatMany as);
    --8<-- [end:List-concatMany]

    --8<-- [start:List-concatMany-iter]
    concatMany-iter {A} (m : List (List A)) : List A :=
      rfor (acc := nil) (l in m)
        concat l acc;
  --8<-- [end:List-concatMany-iter]

  end;

  --8<-- [start:SolPrime]
  prime (x : Nat) : Bool :=
    let
      go : Nat -> Bool
        | zero := true
        | (suc zero) := true
        | n@(suc k) := if (mod x k == 0) false (go k);
    in case x
      | zero := false
      | suc zero := false
      | suc k := go k;
  --8<-- [end:SolPrime]

  --8<-- [start:SolHalf]
  half : Nat -> Nat
    | zero := 0
    | (suc zero) := 0
    | (suc (suc n)) := half n + 1;
  --8<-- [end:SolHalf]

  --8<-- [start:SolSuffixes]
  suffixes {A} : List A -> List (List A)
    | nil := nil :: nil
    | xs@(_ :: xs') := xs :: suffixes xs';
  --8<-- [end:SolSuffixes]

  module Tree-nat;
    type Tree :=
      | leaf : Nat -> Tree
      | node : Nat -> Tree -> Tree -> Tree;

    --8<-- [start:SolTreeMap]
    tmap (f : Nat -> Nat) : Tree -> Tree
      | (leaf x) := leaf (f x)
      | (node x l r) := node (f x) (tmap f l) (tmap f r);
  --8<-- [end:SolTreeMap]
  end;

  module Tree-poly;
    --8<-- [start:SolTreeMapPoly]
    type Tree A :=
      | leaf : A -> Tree A
      | node : A -> Tree A -> Tree A -> Tree A;

    tmap {A B} (f : A -> B) : Tree A -> Tree B
      | (leaf x) := leaf (f x)
      | (node x l r) := node (f x) (tmap f l) (tmap f r);
  --8<-- [end:SolTreeMapPoly]
  end;

  module reverse-for;
    --8<-- [start:SolReverseFor]
    reverse {A} (xs : List A) : List A :=
      for (acc := nil) (x in xs) {x :: acc};
  --8<-- [end:SolReverseFor]
  end;

  module reverse-tail;
    --8<-- [start:SolReverseTail]
    reverse {A} : List A -> List A :=
      let
        go (acc : List A) : List A -> List A
          | nil := acc
          | (x :: xs) := go (x :: acc) xs;
      in go nil;
  --8<-- [end:SolReverseTail]
  end;

  --8<-- [start:SolFact]
  fact : Nat -> Nat :=
    let
      go (acc : Nat) : Nat -> Nat
        | zero := acc
        | n@(suc n') := go (acc * n) n';
    in go 1;
  --8<-- [end:SolFact]

  --8<-- [start:Composition]
  import Stdlib.Data.Fixity open;

  syntax operator ∘ composition;
  ∘ {A B C} (f : B -> C) (g : A -> B) (x : A) : C := f (g x);
  --8<-- [end:Composition]

  --8<-- [start:SolCompose]
  comp {A} (fs : List (A -> A)) : A -> A :=
    for (acc := id) (f in fs) {acc ∘ f};
--8<-- [end:SolCompose]

end;
