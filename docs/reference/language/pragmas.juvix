{-# format: false #-}
module pragmas;

import Stdlib.Prelude open hiding {map; Natural; mkNatural; naturalNatI};

--8<-- [start:pragma-inline]
{-# inline: true #-}
f : Nat -> Nat
  --8<-- [end:pragma-inline]
  | x := x;

--8<-- [start:pragma-inline-with-unroll]
{-# inline: true, unroll: 100 #-}
g : Nat -> Nat
  --8<-- [end:pragma-inline-with-unroll]
  | x := x;

--8<-- [start:pragma-partial-inline]
{-# inline: 2 #-}
compose {A B C} (f : B -> C) (g : A -> B) (x : A) : C :=
  f (g x);
--8<-- [end:pragma-partial-inline]

module inlineModule;
  axiom <body-f> : Nat -> Nat;

  axiom <body-g> : Nat -> Nat;

  axiom <body-h> : Nat -> Nat;

  --8<-- [start:pragma-inline-module]
  {-# inline: true #-}
  module M;
    f : Nat -> Nat := <body-f>;
    g : Nat -> Nat := <body-g>;

    {-# inline: false #-}
    h : Nat -> Nat := <body-h>;
  end;
--8<-- [end:pragma-inline-module]

end;


module specialisations;

--8<-- [start:pragma-specialise-arg]
  {-# specialize: [f] #-}
  map {A B} (f : A -> B) : List A -> List B
    | nil := nil
    | (x :: xs) := f x :: map f xs;
--8<-- [end:pragma-specialise-arg]

  axiom T : Type;
  axiom T' : Type;

--8<-- [start:pragma-map-g]
  map_g : List T -> List T'
    | nil := nil
    | (x :: xs) := g x :: map_g xs;
--8<-- [end:pragma-map-g]

--8<-- [start:pragma-specialise-by]
  {-# inline: true #-}
  funa {A} (f : A -> A) (a : A) : A :=
    let
      {-# specialize-by: [f] #-}
      go : Nat -> A
        | zero := a
        | (suc n) := f (go n);
    in go 10;
--8<-- [end:pragma-specialise-by]

--8<-- [start:pragma-specialise-trait]
{-# specialize: true #-}
trait
type Natural N := mkNatural {
  + : N -> N -> N;
  * : N -> N -> N;
  fromNat : Nat -> N;
};
--8<-- [end:pragma-specialise-trait]

axiom <body> : Natural Nat;

--8<-- [start:pragma-specialise-instance]
{-# specialize: true #-}
instance
naturalNatI : Natural Nat := <body>;
--8<-- [end:pragma-specialise-instance]

end;
