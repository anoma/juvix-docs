module MidSquareHash;

import Stdlib.Prelude open;

--- `pow N` is 2 ^ N
pow : Nat -> Nat
  | zero := 1
  | (suc n) := 2 * pow n;

--- `hash N` hashes a number with max N bits (i.e. smaller than 2^N) into 6 bits
--- (i.e. smaller than 64) using the mid-square algorithm.
hash : Nat -> Nat -> Nat
  | (suc n@(suc (suc m))) x :=
    if
      (x < pow n)
      (hash n x)
      (mod (div (x * x) (pow m)) (pow 6))
  | _ x := x * x;

main (x y : Nat) : Bool := hash 16 x == y;
