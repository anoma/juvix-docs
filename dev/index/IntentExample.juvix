module IntentExample;

{-
import Anoma open;
import Anoma.Resource open using {mkResource as mkResource'};
import Apps.TwoPartyExchange.Asset open;

import Data.Map as Map;
open Map using {Map};

import Stdlib.Prelude open;

--- Definitions related to Alice's intent
--8<-- [start:aliceIntent]
module AliceIntent;
  logicFunction : ResourceKind -> PartialTx -> Bool
    | kind tx :=
      let
        createdRs : List Resource := createdResources tx;
        createdHashes : List LogicHash :=
          map Resource.logicHash createdRs;
      in isCreated kind
        || (quantityOfDenom Dolphin.denomination createdRs
            == ofNat 1
          && quantityOfDenom A.denomination createdRs == ofNat 1)
        || quantityOfDenom Dolphin.denomination createdRs == ofNat 1
        && quantityOfDenom B.denomination createdRs == ofNat 2;

  --- This will be computed from the logic function
  logicHash : LogicHash := 1;

  staticData : ByteString := 3 :: nil;

  denomination : Denomination := 1 :: staticData;

  mkResource (n : Int) : Resource :=
    mkResource'
      (logicHash := logicHash;
      staticData := staticData;
      dynamicData := nil;
      quantity := n);
end;
--8<-- [end:aliceIntent]

--8<-- [start:partialTxs]
module Alice;
  -- Alice is willing to exchange either 2 B or 1 A for 1 Dolphin.
  partialTransaction : PartialTx :=
    mkPartialTx
      (consumedPair := A.mkResource 1, B.mkResource 2;
      createdPair := AliceIntent.mkResource 1, dummyResource);
end;

module Bob;
  partialTransaction : PartialTx :=
    mkPartialTx
      (consumedPair := Dolphin.mkResource 1, dummyResource;
      createdPair := A.mkResource 1, dummyResource);
end;

module Solver;
  partialTransaction : PartialTx :=
    mkPartialTx
      (consumedPair := AliceIntent.mkResource 1, dummyResource;
      createdPair := Dolphin.mkResource 1, B.mkResource 2);
end;
--8<-- [end:partialTxs]

--8<-- [start:logics]
logicFunctions : Map LogicHash LogicFunction :=
  mkLogicFunctionMap
    ((AliceIntent.logicHash, AliceIntent.logicFunction) :: nil);
--8<-- [end:logics]
-}
