module records;

module Person;
  import Stdlib.Prelude open;

  --8<-- [start:person]
  type Person :=
    mkPerson {
      name : String;
      age : Nat
    };
--8<-- [end:person]

end;

--8<-- [start:pair]
type Pair (A B : Type) :=
  mkPair {
    fst : A;
    snd : B
  };
--8<-- [end:pair]

--8<-- [start:declaringnewtype]
type T := constructT : T;

type newtype := mkNewtype {f : T};
--8<-- [end:declaringnewtype]

--8<-- [start:declaringpair]
p1 : Pair T T :=
  mkPair (fst := constructT; snd := constructT);
--8<-- [end:declaringpair]

--8<-- [start:viafields]
p1' : Pair T T :=
  mkPair (fst := Pair.fst p1; snd := Pair.snd p1);
--8<-- [end:viafields]

--8<-- [start:openrecord]
open Pair;

flipP : Pair T T := mkPair (fst := snd p1; snd := fst p1);
--8<-- [end:openrecord]

--8<-- [start:declaringenum]
type EnumRecord :=
  | C1 {
      c1a : T;
      c1b : T
    }
  | C2 {
      c2a : T;
      c2b : T
    };

p2 : Pair EnumRecord EnumRecord :=
  mkPair
    (fst := C1 (c1a := constructT; c1b := constructT);
    snd := C2 (c2a := constructT; c2b := constructT));
--8<-- [end:declaringenum]
