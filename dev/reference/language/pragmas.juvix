{-# format: false #-}
module pragmas;

import Stdlib.Prelude open;

--8<-- [start:pragma-inline]
{-# inline: true #-}
f : Nat -> Nat
  --8<-- [end:pragma-inline]
  | x := x;

--8<-- [start:pragma-inline-with-unroll]
{-# inline: true, unroll: 100 #-}
g : Nat -> Nat
  --8<-- [end:pragma-inline-with-unroll]
  | x := x;

--8<-- [start:pragma-partial-inline]
{-# inline: 2 #-}
compose {A B C} (f : B -> C) (g : A -> B) (x : A) : C :=
  f (g x);
--8<-- [end:pragma-partial-inline]

module inlineModule;
  axiom <body-f> : Nat -> Nat;

  axiom <body-g> : Nat -> Nat;

  axiom <body-h> : Nat -> Nat;

  --8<-- [start:pragma-inline-module]
  {-# inline: true #-}
  module M;
    f : Nat -> Nat := <body-f>;
    g : Nat -> Nat := <body-g>;

    {-# inline: false #-}
    h : Nat -> Nat := <body-h>;
  end;
--8<-- [end:pragma-inline-module]

end;


module specialisations;

--8<-- [start:pragma-specialise]

-- {-# specialise: true #-} -- Need v0.5.3
trait
type Natural N := mkNatural {
  + : N -> N -> N;
  * : N -> N -> N;
  fromNat : Nat -> N;
};
--8<-- [end:pragma-specialise]

{-

axiom <body> : Natural Nat;

--8<-- [start:pragma-specialise-instance]
instance
naturalNatI : Natural Nat := <body>;
--8<-- [end:pragma-specialise-instance]

-}
end;
