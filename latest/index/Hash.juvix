--8<-- [start:hash]
module Hash;

import Stdlib.Prelude open;

{-# unroll: 30 #-}
terminating
power' (acc a b : Nat) : Nat :=
  let
    acc' : Nat := if (mod b 2 == 0) acc (acc * a);
  in if (b == 0) acc (power' acc' (a * a) (div b 2));

power : Nat â†’ Nat := power' 1 2;

hash' : Nat -> Nat -> Nat
  | (suc n@(suc (suc m))) x :=
    if
      (x < power n)
      (hash' n x)
      (mod (div (x * x) (power m)) (power 6))
  | _ x := x * x;

hash : Nat -> Nat := hash' 16;

main : Nat -> Nat := hash;
--8<-- [end:hash]
