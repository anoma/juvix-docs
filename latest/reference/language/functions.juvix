module functions;

module example-multiply-by-two;
  --8<-- [start:multiplyByTwo]
  open import Stdlib.Data.Nat;
  
  multiplyByTwo : Nat -> Nat;
  multiplyByTwo n := 2 * n;
--8<-- [end:multiplyByTwo]
end;

module short-definitons;
  --8<-- [start:shortDefinitions]
  open import Stdlib.Data.Nat;
  
  multiplyByTwo :
    Nat -> Nat :=
      \ {
        | n := 2 * n
      };
--8<-- [end:shortDefinitions]
end;

module example-negate-boolean;
  --8<-- [start:negateBoolean]
  open import Stdlib.Data.Bool;
  
  neg : Bool -> Bool;
  neg true := false;
  neg false := true;
--8<-- [end:negateBoolean]
end;

module mutually-recursive;
  --8<-- [start:mutuallyRecursive]
  open import Stdlib.Data.Nat;
  open import Stdlib.Data.Bool;

  open import Stdlib.Prelude;
  
  odd : Nat -> Bool;
  
  even : Nat -> Bool;

  odd zero := false;
  odd (suc n) := even n;

  even zero := true;
  even (suc n) := odd n;
--8<-- [end:mutuallyRecursive]
end;

module anonymous-functions;
  --8<-- [start:anonymousFunctions]
  open import Stdlib.Prelude;
  
  odd : Nat -> Bool;
  
  even : Nat -> Bool;

  odd :=
    \ {
      | zero := false
      | (suc n) := even n
    };

  even :=
    \ {
      | zero := true
      | (suc n) := odd n
    };
--8<-- [end:anonymousFunctions]
end;
