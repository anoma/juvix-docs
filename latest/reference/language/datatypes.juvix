module datatypes;

import Stdlib.Data.Fixity open;

--8<-- [start:typeNat]
type Nat :=
  | zero : Nat
  | suc : Nat -> Nat;
--8<-- [end:typeNat]

--8<-- [start:addNat]
syntax operator + additive;
+ : Nat -> Nat -> Nat
  | zero b := b
  | (suc a) b := suc (a + b);
--8<-- [end:addNat]

module List;
  --8<-- [start:typeList]
  syntax operator :: cons;
  type List (A : Type) :=
    | nil : List A
    | :: : A -> List A -> List A;
  --8<-- [end:typeList]

  --8<-- [start:elemList]
  import Stdlib.Data.Bool open using {Bool; false; ||};

  elem {A} (eq : A -> A -> Bool) (s : A) : List A -> Bool
    | nil := false
    | (x :: xs) := eq s x || elem eq s xs;
--8<-- [end:elemList]
end;
