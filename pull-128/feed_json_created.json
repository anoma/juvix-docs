{"version": "https://jsonfeed.org/version/1", "title": "Juvix Docs", "home_page_url": "https://docs.juvix.org/pull-128/", "feed_url": "https://docs.juvix.org/pull-128/feed_json_created.json", "description": "The official documentation for Juvix", "icon": null, "authors": [{"name": "The Juvix Team"}], "language": "en", "items": [{"id": "https://docs.juvix.org/pull-128/blog/iterators.html", "url": "https://docs.juvix.org/pull-128/blog/iterators.html", "title": "Iterator syntax", "content_html": "<h1>Iterator syntax</h1>\n<p>A common pattern in functional programming is the traversal of data structures,\nparticularly lists, in a specified order accumulating some values. If you've\nused languages like Haskell or OCaml, you must have come across the \"fold left\"\n(<code>foldl</code>) and \"fold right\" (<code>foldr</code>) higher-order functions which implement this\npattern. These functions are also [available in Juvix][juvix-folds]. In this\nblog post, I describe an iterator syntax I designed for Juvix which allows\nexpressing folds (and maps, filters and more) in a readable manner.</p>", "image": "https://docs.juvix.org/pull-128/assets/images/social/blog.png", "date_published": "2023-06-08T00:00:00+00:00", "authors": [{"name": "lukasz"}], "tags": ["iterators", "language", "syntax"]}, {"id": "https://docs.juvix.org/pull-128/blog/strictly-positive-data-types.html", "url": "https://docs.juvix.org/pull-128/blog/strictly-positive-data-types.html", "title": "Stay Positive", "content_html": "<h1>Stay Positive</h1>\n<p>Let us explore the concept of strictly positive inductive data types, a critical requirement within the Juvix framework for classifying a data type as well-typed.</p>\n<p>An <strong>inductive type</strong> is considered <em>strictly positive</em> if it either:</p>\n<ol>\n<li>Does not appear within the argument types of its constructors, or</li>\n<li>Appears strictly positively within the argument types of its constructors.</li>\n</ol>\n<p>A name is considered strictly positive for an inductive type if it never appears\nin a negative position within the argument types of its constructors. The term\n<em>negative position</em> denotes instances located to the left of an arrow in a type\nconstructor argument.</p>", "image": "https://docs.juvix.org/pull-128/assets/images/social/blog.png", "date_published": "2022-07-25T00:00:00+00:00", "authors": [{"name": "jonathan"}], "tags": ["inductive-types", "type-system", "type-system"]}]}